#挑战简介
Strangely enough, we'll start our crypto journey with the humble Exclusive Or (XOR) operator. An XOR is one of the most common bitwise operators that you will encounter in your security journey, especially in cryptography. A couple of terms to unpack here...

Bitwise. Computers think in binary! That is, they conceptualize numbers in base 2, so something like 9 is expressed as 1001. An XOR operates on one pair of bits at a time, 
resulting in in 1 if the bits are different (one is 1 and the other is 0) or 0 if they are the same (both 1 or both 0). It is then applied to every bit pair independently, and the results are concatenated. For example, 
decimal 9 (1001) XORed with decimal 5 (0101) results in 1100 (decimal 12).

Cryptography. Why is XOR so common in crypto? In cryptography, it is common because it is self-inverse! That is (using ^ for XOR here, which is consistent with many programming languages), 5 ^ 9 == 12, and 12 ^ 9 == 5. 
If the number 9 is a key only known to you and me, I can send you messages by XORing them with 9, and you can recover the message with XORing them with 9 as well! Obviously, we can achieve this property with me adding 9 and you subtracting 9, 
without using XOR, but this requires more complex circuitry and extra bits (e.g., to handle "carrying the 1" in 1111 + 0001 == 10000), whereas XOR does not have this problem (1111 ^ 0001 == 1110).

In this level, you will learn to XOR! We'll give you a shared key, XOR a secret number with it, and expect you to recover the number.

HINT: Use Python's ^ operator to XOR integers!

#这次正式进入密码学
#异或，二进制内的异或则是，异则1，同则0.
#步骤分为加密前，密钥，加密后三个步骤，三个数字，异或计算即可
