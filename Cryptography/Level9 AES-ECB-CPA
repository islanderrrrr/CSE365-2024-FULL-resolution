#挑战简介
#这题我可得注重讲一讲，卡了我有一个星期
#此题要求：
*给你一个程序，主界面两个选择
1.输入明文并用一个随机密钥给你加密展示(随机密钥在一次执行中固定唯一)
2.输入一个index索引和长度，对flag的一部分进行加密展示
*密钥未知，flag未知
#这边对于AES-ECB有个概念：
对于块大小的字节，加密的字节数如小于块大小，那么密文大小固定；
如果大于等于块大小，那么密文大小则会再加上一个块大小(乱总结的)
#这个不重要，重要的是这题的思路
#思路：创建一个flag范围字符的字典，将所有字符的加密密文储存起来，对flag进行逐个字节的对照，从而推出明文

#思路有了，但是人工计算成本巨大，每个字符的加密与对照，58字节的flag，对照次数要达数百次，费时费力
#因此我们要会用python得一个库函数
*pwntools

#代码如下：
*我将解释每一段代码，都是我花费了超长时间学到的
#!/usr/bin/python
from pwn import *  //引入pwntools

d = []        开辟一个数组，用于存放字典，包括字符和加密密文
valid_ascii = (
    list(range(48, 58))+      //0~9
    list(range(65, 91))+        //A~Z
    list(range(97, 123))+         //a~z
    [45, 46, 95, 173, 175]          //特殊字符
)
#d[valid_ascii[0]] = chr(valid_ascii[0])      
#print(d[valid_ascii[0]])
context(os='linux',arch='AMD64',log_level='debug')        
*context：设置 pwntools 的上下文，指定目标系统为 Linux，架构为 AMD64，并将日志级别设置为 debug，以便输出详细调试信息。

p = process('/challenge/run')        //启动内地进程

def encryascii(number):                //字典加密储存函数
    for i in range(number):            //for循环 对每个字符进行加密储存
        p.recvline(b'Choice?')         //recvline 接收语句"Choice?"
        p.sendline(b'1')                //sendline 输入语句'1'
        p.recvuntil(b'Data?')            //接收语句 'Data?'
        p.sendline(chr(valid_ascii[i]))        //输入 '字典中每个字符'
        p.recvuntil(b'Result:')                //recvuntil 接收直到出现 'Result:'
        data=p.recvline().strip()                //data变量储存 'Result:后面的密文'
        d.append((chr(valid_ascii[i]),data))        //append存入数组 将对应字符以及密文储存进d数组
        if chr(valid_ascii[i]) == '_':            // '_'字符是最后一个，为了中断for程序，进行判断并中断
            break

def encrypt_flag_char(index,length):            //检查字典与flag对应的密文，并进行存储
    p.recvline(b'Choice?')
    p.sendline(b'2')                    //这里进入第二个选择，加密flag
    p.recvline(b'Index?')
    p.sendline(str(index).encode())        //index 代表第几个字符
    p.recvuntil(b'Length?')
    p.sendline(str(length).encode())        //长度固定为1，方便对照
    p.recvuntil(b'Result:')
    return p.recvline().strip()            //获取flag单字节密文

encryascii(len(valid_ascii))            //执行加密字典

flag = ''                //设立空的flag字符串
for idx in range(58):            //对照字典，进行flag输入
    encry_char = encrypt_flag_char(idx, 1)            //将flag每一个字节加密的结果，作为encry_char变量
    for char, enc_data in d:                //开始对密文进行字典内的逐个对比
        if enc_data == encry_char:          //如果相同
            flag += char                    //flag便加上对应密文的字符，并中断
            print(f"Found character {char} at index {idx}")
            break

#for idx, data in enumerate(d):
    #print(f"Result for {chr(valid_ascii[idx])}: {data.decode()}")
print(f"the flag {flag}")                输出flag 大功告成！！！

#总而言之，这道题我的收获还是非常丰富的，教会了我如何用python脚本进行进程的控制与对话。并结合程序实现自动化解密，非常有意思...
